#+TITLE: JS lec-29

* 事件对象

本节告诉我, 我之前对 *eventStream* 的执行顺序理解有误:

| 监听器 eventStream 设置  | 元素   | 点击 button 后触发的执行顺序 |
|--------------------------+--------+------------------------------|
| eventListener(x,x,true)  | body   |                            1 |
| eventListener(x,x,false) | button |                            2 |
| eventListener(x,x,false) | html   |                            3 |

所以, 每个元素的事件监听器的 eventStream 设置的是某元素触发时该元素自己的执行,
就像有个东西一直在循环的跑在监听, 某个事件被触发他是 *同时* 触发声明了该事件的 *
所有* 监听器, 只是每个监听器会根据自己和触发该事件的源头元素之间的嵌套关系, 来决
定自己是先执行还是后执行:

1. 如果自己设置为 true --- 捕获, 且触发源头元素来自自己内部, 则自己先于该源头元
   素执行.
2. 如果自己设置为 true --- 捕获, 且触发源头元素来自自己外部, 则自己晚于该源头元
   素执行.
3. 如果自己设置为 false --- 冒泡, 且触发源头元素来自自己内部, 则自己晚于该源头元
   素执行.
4. 如果自己设置为 false --- 冒泡, 且触发源头元素来自自己外部, 则自己先于该源头元
   素执行.




*属性:*

| 属性          | 描述                                       |
|---------------+--------------------------------------------|
| bubbles       | 布尔返回值, 指示事件是否是冒泡事件类型     |
| cancelable    | 布尔返回值, 指示事件是否是可取消的默认动作 |
| currentTarget | 返回事件监听器触发该事件的元素.            |
| eventPhase    | 返回事件传播的当前阶段.                    |
| target        | 返回触发此事件的元素(事件的目标节点)       |
| timeStamp     | 返回事件生成的日期和时间                   |
| type          | 返回当前 event 对象表示的事件的名称.       |

- eventPhase = 1; 如果是在捕获阶段调用的事件处理程序
- eventPhase = 2; 如果事件处理程序处于目标对象上
- eventPhase = 3; 如果是在冒泡阶段调用的事件处理程序



*方法:*

| 方法              | 描述                                   |
|-------------------+----------------------------------------|
| initEvent()       | 初始化新创建的 Event 对象的属性        |
| preventDefault()  | 通知浏览器不要执行与事件关联的默认动作 |
| stopPropagation() | 不再派发事件                           |


*鼠标事件:*

| 属性          | 描述                                   |
|---------------+----------------------------------------|
| onclick       | 当用户点击某个对象时调用的事件句柄     |
| oncontextmenu | 在用户点击鼠标右键打开上下文菜单时触发 |
| ondblclick    | 当用户双击某个对象时调用的事件句柄     |
| onmousedown   | 鼠标按钮被按下                         |
| onmouoseenter | 当鼠标指针移动到元素上时触发           |
| onmouseleave  | 当鼠标指针移出元素时触发               |
| onmousemove   | 鼠标被移动                             |
| onmouseover   | 鼠标移动到某元素上                     |
| onmouseout    | 鼠标从某元素移开                       |
| onmouseup     | 鼠标按键被松开                         |
|               |                                        |
